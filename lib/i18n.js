// Generated by CoffeeScript 1.6.3
(function() {
  var attributeNames, handlers, i18n, key, process, root, selector;

  handlers = {
    "data-i18n-content": function(element, attributeValue, handler) {
      if (handler(attributeValue)) {
        return element.innerHTML = handler(attributeValue);
      }
    },
    "data-i18n-values": function(element, attributeValue, handler) {
      var a, object, part, parts, path, propExpr, propName, value, _i, _len;
      parts = attributeValue.replace(/\s/g, '').split(/;/);
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        a = part.match(/^([^:]+):(.+)$/);
        if (a) {
          propName = a[1];
          propExpr = a[2];
        }
        if (handler(propExpr)) {
          value = handler(propExpr);
          if (propName.charAt(0) === '.') {
            path = propName.slice(1).split('.');
            object = element;
            while (object && path.length > 1) {
              object = object[path.shift()];
            }
            if (object) {
              object[path] = value;
              if (path === 'innerHTML') {
                process(element, handler);
              }
            }
          } else {
            element.setAttribute(propName, value);
          }
        } else {
          console.warn('data-i18n-values: Missing value for "' + propExpr + '"');
        }
      }
      return null;
    }
  };

  attributeNames = [];

  for (key in handlers) {
    attributeNames.push(key);
  }

  selector = '[' + attributeNames.join('],[') + ']';

  process = function(node, handler) {
    var att, element, elements, name, _i, _j, _len, _len1;
    elements = node.querySelectorAll(selector);
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      for (_j = 0, _len1 = attributeNames.length; _j < _len1; _j++) {
        name = attributeNames[_j];
        att = element.getAttribute(name);
        if (att !== null) {
          handlers[name](element, att, handler);
        }
      }
    }
    return null;
  };

  i18n = {
    process: process
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.i18n = i18n;

}).call(this);
